#!/bin/zsh

# Copyright 2015 Han Boetes <han@boetes.org>
# For license info see http://unlicense.org/

# This script plays songs, random or non-random, see the -h output for
# more help.

# Feature requests: play songs only once, add optional count in queue mode
# Make it usable for other people.

PATH=/bin:/usr/local/bin:/usr/bin
setopt no_bare_glob_qual
alias GREP='grep -i'
playlist="/mp3/playlist.gz"
play_queue="/mp3/queue"
# Number of track in the queue to print
qtail=20
play_hist="/mp3/history"
# Directory where you want to store your pidfile.
prog="${0##*/}"
pid_dir="$TMPDIR/${prog}-$(id -u)"
# Number of songs to play, unless overriden later on.
count=1

# Ugly code for portability.
OS=$(uname -s)
case $OS in
    Darwin)
        ZCAT=gzcat
        ;;
    *)
        ZCAT=zcat
        ;;
esac


alnum()
{
    if [[ $1 != <-> ]]; then
        error "'$1' is not a valid integer!"
    fi
}

strip_path()
{
    sed -e 's|.*/||' $1
}

print_green()
{
    print '\e[32m'${1}'\e[00m'
}

print_yellow()
{
    print '\e[33m'${1}'\e[00m'
}

print_song()
{
    song_nopath="${song##*/}"
    clear
    # Just in case the file does not exist.
    touch $play_hist
    tail -n10 $play_hist | strip_path
    print_green $song_nopath
    print $song_nopath >> $play_hist
    print "NP: $song_nopath" > ~/.nowplaying
    rsync ~/.nowplaying han@boetes.org: &
    # Let's not print to much files in the queue
    strip_path $play_queue | head -n$qtail
    qlength=$(cat $play_queue | wc -l)
    if ((qlength > qtail)); then
        ((rest = qlength - qtail))
        print_yellow "And $rest more tracks."
    fi
}

unprint_song()
{
    : > ~/.nowplaying
    rsync ~/.nowplaying han@boetes.org: &
}

warn()
{
    print "$prog: Warning: Song $song not found!?" >&2
}

error()
{
    print "$prog: $1" >&2
    exit 1
}

play_song()
{
    print_song
    # "-vo null" disables displaying album art
    mpv  -vo null -af volume=-10 "$song" -really-quiet || warn
}

# Not all sed versions support the -i option. This function is a
# slight overkill. I actually wrote it for another program.
sed-i()
{
    TMP1=$(mktemp sed-i.XXXXXXXXXX) || return 1
    REGEX="$1"
    shift
    for i in $*; do
        sed -e "$REGEX" "$i" > $TMP1
        # Preserve permissions etc.
        cat $TMP1 > "$i" || fail2write
    done
    rm $TMP1
    unset TMP1
}

create_pid()
{
    # First create the pid_dir in a safe way, if it doesn't exist.
    if [[ ! -d $pid_dir ]]; then
        pid_tmpdir=$(mktemp -d $pid_dir.XXXXXXXXXXXXXXXXX) || error "Can't create tmp dir."
        mv $pid_tmpdir $pid_dir || error "Can't create pid dir."
    fi

    if [[ -e $pid_dir/pid ]]; then
        error "is already running."
    else
        # And then create a pid_file
        print $$ > $pid_dir/pid
    fi
}

remove_pid()
{
    # Only remove the pidfile if it belongs to the current
    # process. Should not happen actually.
    pid=$(< $pid_dir/pid)
    if [[ $$ = $pid ]]; then
        rm $pid_dir/pid
    fi
}

fail2write()
{
    print "Can't write to ${play_queue}, check permissions." >&2
    zshexit
}

queue_mode()
{
    create_pid
    if [[ ! -f $play_queue ]]; then
        error "$play_queue does not exist or isn't a regular file."
    fi
    while [[ -s $play_queue ]]; do
        song=$(head -n1 $play_queue)
        sed-i 1d $play_queue || fail2write
        play_song
        if [[ $pause = "TRUE" ]]; then
            print -n 'Press the any key to continue '
            read -sk 1 nothing
            print
        fi
    done
    # This message only makes sense in queue mode.
    if [[ $qmode == "TRUE" ]]; then
        print "The queue is empty!"
    fi
    exit 0
}

enqueue_song()
{
    if [[ $head = "TRUE" ]]; then
        sed-i "$headcount i $song" $play_queue || fail2write
        ((headcount++))
    else
        print "$song" >> $play_queue || fail2write
    fi
}

zshexit()
{
    if [[ $do_nothing != "TRUE" ]]; then
        unprint_song
        remove_pid
    fi
    exit
}

# Incase the program is interrupted, for example by pressing ctrl-c
# first make sure the pid file is removed etc.
TRAPINT()
{
    zshexit
}

show_help()
{
    cat << EOF
Usage: $prog -[ncaplLqxH] [grep regex]
  -n play tracks in non-random order
  -c x count
  -a play all selected files.
  -p pause after each track.
  -l select regex with finetuning.
  -L = -l -a -n
  -q play all songs from $play_queue
  -x clear the queue
  -H add songs to the head of $play_queue
EOF
}

# Parse command line arguments
while  (($# > 0)); do
    case $1 in
        -h)
            show_help
            do_nothing="TRUE"
            exit 0
            ;;
        -q)
            # No other arguments. Just play the queue until the end.
            unset nonrandom get_list pause all
            qmode="TRUE"
            queue_mode
            ;;
        -n)
            shift 1
            nonrandom="TRUE"
            ;;
        -c)
            alnum $2
            count=$2
            shift 2
            ;;
        -p)
            pause="TRUE"
            shift 1
            ;;
        -l)
            get_list="TRUE"
            shift 1
            ;;
        -L)
            get_list="TRUE"
            all="TRUE"
            nonrandom="TRUE"
            shift 1
            ;;
        -a)
            all="TRUE"
            shift 1
            ;;
        -x)
            # Clear the queue
            : > $play_queue
            shift 1
            ;;

        -H)
            head="TRUE"
            headcount=1
            shift 1
            ;;
        -*)
            print "Unknown option: $1" >&2
            show_help
            do_nothing="TRUE"
            exit 1
            ;;
        *)
            # Handle input regex below.
            break
            ;;
    esac
done

# What are we going to play?
searchstring="$*"

# This is a bit of zsh magic: array=("${(@f)$(command)}") it ensures a
# list of files is turned into a proper array.
allfiles=("${(@f)$($ZCAT $playlist)}")

# A regex has been given and we can refine that regex and see the
# results.
if [[ $get_list = "TRUE" ]]; then
    while :; do
        if [[ $searchstring == "" ]]; then
            searchstring='.'
        fi
        selection=("${(@f)$(print -l $allfiles | GREP $searchstring)}")
        clear
        print -l $selection
        oldsearchstring="$searchstring"
        # vared is a very nifty function provided by zsh.
        vared -p 'What do you want to hear? Press enter if you are done. ' searchstring
        if [[ $oldsearchstring = $searchstring ]]; then
            allfiles=($selection)
            break
        fi
    done
elif [[ $searchstring == "" ]]; then
    # No searchstring given, that's a valid option too. Just play
    # something.
    :
elif ! allfiles=("${(@f)$(print -l $allfiles | GREP $searchstring)}"); then
    # Or a regex is given but no need to refine it.
    do_nothing="TRUE"
    error "Nothing found with that regexp."
fi

if [[ $all = "TRUE" ]]; then
    count=${#allfiles}
fi

holdcount="$count"
# Get through our list.
while ((count-- > 0)); do
    if [[ ${#allfiles} == 0 ]]; then
        print 'No more files to play.'
        break
    fi
    if [[ $nonrandom == "TRUE" ]]; then
        rndm=1
    else
        # The Pseudorandom $RANDOM is not random enough. All songs
        # from the same few artists gets annoying real quick.
        rndm=$(od -vAn -N4 -tu4 < /dev/urandom)
        # Mind the off by one.
        (((rndm %= ${#allfiles}) += 1))
    fi
    song="$allfiles[$rndm]"
    # Strip the path.
    enqueue_song
    # Remove the current song from the playlist.
    allfiles[$rndm]=()
done

# Probably you want to start playing music if you get here and $0
# isn't running.
if [[ ! -f $pid_dir/pid ]] && [[ -s $play_queue ]]; then
    queue_mode
else
    print "$holdcount songs added to the play queue file."
    do_nothing="TRUE"
fi
